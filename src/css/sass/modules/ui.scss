//F(x) = ( $wrapper-width - (n-1)$gutter-width ) / n

.content_wrapper{
  @include min-macbook{
    width: $wrapper-width;
    text-align: center;
  }
  @include macbook{
    width: 100%;
  }
}

.columns-1{
  width: $wrapper-width;
}

.columns-2{
  width: ($wrapper-width - $gutter-width)/2; 
}

.columns-3{
  width: ($wrapper-width - $gutter-width*2)/3; 
}

.columns-4{
  width: ($wrapper-width - $gutter-width*3)/4; 
}

.columns-6{
  width: ($wrapper-width - $gutter-width*5)/6;  
}

.columns-8{
  width: ($wrapper-width - $gutter-width*7)/8;  
}

.columns-12{
  width: $column-width;
}

// F(x) =  n * $column-width + (n-1) * $gutter-width

.col-1{
  width: $column-width;
}

.col-2{
  width: $column-width * 2 + $gutter-width;
}

.col-3{
  width: $column-width * 3 + 2 * $gutter-width;
}

.col-4{
  width: $column-width * 4 + 3 * $gutter-width;
}

.col-6{
  // width: $column-width * 6 + 5 * $gutter-width;
  // bug? check when not tired :D
  width: 50%;
}

.col-8{
  width: $column-width * 8 + 7 * $gutter-width;
}

.col-9{
  width: $column-width * 9 + 8 * $gutter-width;
}

.col-10{
  width: $column-width * 10 + 9 * $gutter-width; 
}

.col-12{
  width: $column-width * 12 + 11 * $gutter-width;
}

.col{

  &:first-child{
    margin-right: $gutter-width;
  }
  &:last-child{
    margin-right: $gutter-width;
  }
  &:not(:first-child):not(:last-child){
    margin-right: $gutter-width/2;
    margin-left: $gutter-width/2;
  }
}

.col-4,.col-8, .col-6{
  padding: 10px;
  @include divi{
    width: 100%;
  }
}


// $wrapper-width: 1280px;
// $gutter-width: 20px;
// $column-width: 88px;

html {
  font-size: $body;
  line-height: 21px;
}

body{

  font-size: $body;
  line-height: 21px;
  margin: auto;

  .error{
    color:$error;
  }

  section{
    transition: all 0.4s ease-in-out; 
  }

	h1,h2,h3,h4,h5,h6,p,span,a{
		margin: 0;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-align: left;
    @include divi{
      text-align:center;
    }
	}
  h1,h2,h3,h4,h5,h6{
    font-family: $heading_font;
    font-weight: $heading_weight;
  }
	h1, h1 span{
		font-size: $h1;
		// font-weight: $heading_weight;
    line-height: 84px;
    // margin-top: 21px;
    // margin-bottom: 42px;
    @include phone{
      font-size: $h2;
      line-height: 42px;
    }
	}
	h2, h2 span{
		font-size: $h2;
		// font-weight: $heading_weight;
    line-height: 42px;
    // margin-top: 21px;
    // margin-bottom: 21px;
	}
  h3, h3 span{
    font-size: $h3;
    // font-weight: $heading_weight;
    line-height: 42px;
    // margin-top: 21px;
    // margin-bottom: 0px;
  }
  h4, h4 span{
    font-size: $h4;
    // font-weight: $heading_weight;
    line-height: 21px;
    // margin-top: 21px;
    // margin-bottom: 0px;
  }
  h5, h5 span{
    font-size: $h5;
    // font-weight: $heading_weight;
    line-height: 21px;
    // margin-top: 21px;
    // margin-bottom: 0px;
  }
	p,span{
		font-weight: $body_weight;
		font-size: $body;
    line-height: 21px;
	}

	a,button,input[type="button"]{
		position: relative;
		cursor: pointer;
		&.button{
      @include button_pill($border-color:$white, $text-color:$white, $text-color-hover:$black, $background-image:linear-gradient(90deg, rgba(0,0,0,0), rgba(0,0,0,0) 50%, #fff 50%, #fff), $hover-effect:'load');
      &:hover{
        mix-blend-mode: color-dodge;
      }
		}
    &.button_black{
      @include button_pill($border-color:$black, $text-color:$black, $text-color-hover:$white, $background-image:linear-gradient(90deg, rgba(0,0,0,0), rgba(0,0,0,0) 50%, #000 50%, #000), $hover-effect:'load');
       &:hover{
        mix-blend-mode: multiply;
      }
    }
     // &.button{
      // background-color: $accent_color;
      // text-transform: uppercase;
      // transition: all 0.4s ease-in-out;
      // &:hover{
      //  // border-top:0px;
      //  // border-left:0px;
      //  // border-right:0px;
      //  // border-top-color:#ffffff;
      //  // border-left-color:#ffffff;
      //  // border-right-color:#ffffff;
      //  border-bottom: 2px solid #fe9426;
      // }
      // &:after{
      //  border-top: 0;
      //   border-right: 0;
      //   -webkit-transform-origin: 50% 50%;
      //   width: 100%;
      //   height:100%;
      //   z-index: 3;
      //   content:'';
      //   position: absolute;
      //   top:0;
      //   left:0;
      //   box-sizing: border-box;
      //   -webkit-transform: scale(0);
      //   border-bottom: 2px solid #fe9426;
      // }
      // &:hover{
       
        // background-color:$darker_accent_color;
        // background-color:#ffffff;
        // color: #fe9426;
        // &:after{
        //  -webkit-transform: scale(1);
        // }
      // }

    // }
		&.button_svg{
			padding: 10px 35px 10px 20px;
			// border:1px solid $blue_grey;
      border:1px solid $white;
			border-radius: 3px;
			transition: 0.4s all ease-in-out;
			position: relative;
      cursor: pointer;
			span{
				font-weight: 500;
			}
			svg{
				margin-left: 15px;
				transition: 0.4s all ease-in-out;
				@include absolute_center_vertically();
			}
			&:hover{
        cursor: pointer;
				padding-left:15px;
				padding-right:40px;
				svg{
					margin-left: 25px;
				}
			}
		}
	}
}

//button

// p, ul, ol, pre, table, blockquote {
//   margin-top: 0px;
//   margin-bottom: 21px;
// }
// ul ul, ol ol, ul ol, ol ul {
//   margin-top: 0px;
//   margin-bottom: 0px;
// }

// hr, .hr {
//   border: 1px solid;
//   margin: -1px 0;
// }
// a, b, i, strong, em, small, code {
//   line-height: 0;
// }
// sub, sup {
//   line-height: 0;
//   position: relative;
//   vertical-align: baseline;
// }
// sup {
//   top: -0.5em;
// }
// sub {
//   bottom: -0.25em;
// }


/* Loader */

.loader{
	position: fixed;
  left: 0px;
  top: 0px;
  width: 100%;
  height: 100%;
  z-index: 9999;
  background: white;
  background-size: 100px;
  &.parent:before{
    display: none;
  }
  .content_wrapper{
  	text-align:center;
	  img{
	  	width: 200px;
	  	margin-bottom: 20px;
	  }
	  color: $base_color;
	  font-size: $body;
	  [class*="loader-"] {
			display: block;
			width: 1em;
			height: 1em;
			color: inherit;
			vertical-align: middle;
			pointer-events: none;
			margin: 0px auto 0;
		}
	  .loader-05 {
			border: .20em solid transparent;
			border-top-color: currentcolor;
			border-radius: 50%;
			animation: 1s loader-05 linear infinite;
			position: relative;
			&:before {
				content: '';
				display: block;
				width: inherit;
				height: inherit;
				position: absolute;
				top: -.20em;
				;
				left: -.20em;
				;
				border: .20em solid currentcolor;
				border-radius: 50%;
				opacity: .5;
			}
		}

		@keyframes loader-05 {
			0% {
				transform: rotate(0deg);
			}
			100% {
				transform: rotate(360deg);
			}
		}
  }
  
}

.utopia_wrapper{

  // Thanks https://codepen.io/cipherbeta/pen/YLdVjw?page=1&

  background: linear-gradient(271deg, #f98f48, #dba987, #bdc1a1, #94ceb8, #08d0c1);
  background-size: 1000% 1000%;
  height: 100%;

  display: flex;
  justify-content: center;
  align-items: center;

  -webkit-animation: AnimationName 10s linear infinite;
  -moz-animation: AnimationName 10s linear infinite;
  animation: AnimationName 10s linear infinite;

  @-webkit-keyframes AnimationName {
      0%{background-position:0% 50%}
      50%{background-position:100% 50%}
      100%{background-position:0% 50%}
  }
  @-moz-keyframes AnimationName {
      0%{background-position:0% 50%}
      50%{background-position:100% 50%}
      100%{background-position:0% 50%}
  }
  @keyframes AnimationName { 
      0%{background-position:0% 50%}
      50%{background-position:100% 50%}
      100%{background-position:0% 50%}
  }

  // .glitch {
  //   position: relative;
  // }
  // .glitch::before,
  // .glitch::after {
  //   content: attr(data-text);
  //   position: absolute;
  //   top: 0;
  //   left: 0;
  //   width: 100%;
  //   height: 100%;
  // }

  // Here's the meat and potatoes.

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy { 
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.glitch {
  position: relative;
  color: white;
  font-size: 4em;
  letter-spacing: .5em;

  @include ipad{
    font-size: 2em;
  }

  /* Animation provies a slight random skew. Check bottom of doc
  for more information on how to random skew. */
  animation: glitch-skew 1s infinite linear alternate-reverse;
  
  // Creates a copy before our text. 
  &::before{
    // Duplicates our text with the mixin.
    @include glitchCopy;
    // Scoots text slightly to the left for the color offset.
    left: 2px;
    // Creates the color 'shadow' that happens on the glitch.
    text-shadow: -2px 0 #ff00c1;
    /* Creates an initial clip for our glitch. This works in
    a typical top,right,bottom,left fashion and creates a mask
    to only show a certain part of the glitch at a time. */
    clip: rect(44px, 450px, 56px, 0);
    /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
    with an alternating animation to keep things fresh. */
    animation: glitch-anim 5s infinite linear alternate-reverse;
  }
  
  // Creates a copy after our text. Note comments from ::before.
  &::after {
    @include glitchCopy;
    left: -2px;
    text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
    animation: glitch-anim2 1s infinite linear alternate-reverse;
  }
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
      transform: skew((random(100) / 100) + deg);
    }
  }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
      transform: skew((random(100) / 100) + deg);
    }
  }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
} 

}
  
/* Like */

.likebtn-wrapper.lb-style-custom{
  .lb-like, .lb-dislike{
    background-color: transparent;
    border: none;
  }
} 

/* slide action */
/* maybe include later with js for <ipad */

@include min-ipad{
  .slide-down,
  .slide-left,
  .slide-right,
  .slide-up{
    will-change: transform;
    transition: all 1s ease-in-out;
    transition-delay: 0.5s;
  }

  .active{
    .slide-down,
    .slide-left,
    .slide-right,
    .slide-up{
      transform:translate(0);
      opacity:1;
      &.s-absolute{
        @include divi{
          transform:translateX(-50%) scale(0.8);
        }
      }
    }
  }

  .slide-down{
    opacity:0;
    transform: translate(0,-1000%);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
  .slide-left{
    opacity:0;
    transform: translate(1000%,0);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
  .slide-right{
    opacity:0;
    transform: translate(-1000%,0);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
  .slide-up{
    opacity:0;
    transform: translate(0,1000%);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
}
